#!/usr/bin/env node/
/*
 * Created by Ilkka on 8.4.2016.
 */
"use strict";

/**
 * Module dependencies.
 */

var app = require('./app.js');
var debug = require('debug')('Api:server');
var https = require('https');
var http = require('http');
var fs = require('fs');
var config = require('../helpers/configStub')('main');
debug('Starting express...');

/**
 * Get port from environment and store in Express.
 */
debug('ENV port: ' + process.env.port);
var port = normalizePort( process.env.PORT || '443');
app.set('port', port);
debug('Used port: ' + port);

/**
 * Create HTTPs server.
 */

var useHttps = config.server.useHttps;
var server = null;
var redirector = null;
debug('useHttps: ' + useHttps);
if(useHttps === true){
    debug('Using https.');
    debug('Creating http server.');
    redirector = http.createServer(function (req, res) {
        res.writeHead(301, { "Location": "https://" + req.headers.host + req.url });
        res.end();
    }).listen(80);
    debug('Http server created for redirection.');
    console.log('Redirecting http traffic to https!');

    debug('Creating https server.');
    server = https.createServer({
        key: fs.readFileSync('localhost.key'),
        cert: fs.readFileSync('localhost.crt')
    }, app);
    debug('Https server created.');

}else{
    debug('Not using https.');
    debug('Creating http server.');
    server = http.createServer(app);
    debug('Http server created.');
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            throw new Error( bind + ' requires elevated privileges');
        case 'EADDRINUSE':
          throw new Error(bind + ' is already in use');
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    console.log('Listening on ' + bind);
}
